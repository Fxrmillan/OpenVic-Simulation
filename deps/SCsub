#!/usr/bin/env python

Import("env")

def build_openvic_dataloader(env):
    ovdl_env = SConscript("openvic-dataloader/SConstruct")
    env.Append(LIBPATH=ovdl_env.openvic_dataloader["LIBPATH"])
    env.Prepend(LIBS=ovdl_env.openvic_dataloader["LIBS"])
    env.Append(CPPPATH=ovdl_env.openvic_dataloader["INCPATH"])
    env.openvic_dataloader = ovdl_env.openvic_dataloader
    env.exposed_includes += env.openvic_dataloader["INCPATH"]

def build_lexy_vdf(env):
    lvdf_env = SConscript("lexy-vdf/SConstruct")
    env.Append(LIBPATH=lvdf_env.lexy_vdf["LIBPATH"])
    env.Prepend(LIBS=lvdf_env.lexy_vdf["LIBS"])
    env.Append(CPPPATH=lvdf_env.lexy_vdf["INCPATH"])
    env.lexy_vdf = lvdf_env.lexy_vdf

def build_ordered_map(env):
    include_path = "ordered-map/include"
    env.ordered_map = {}
    env.ordered_map["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.ordered_map["INCPATH"])
    env.exposed_includes += env.ordered_map["INCPATH"]

def build_colony(env):
    include_path = "plf_colony"
    env.colony = {}
    env.colony["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.colony["INCPATH"])
    env.exposed_includes += env.colony["INCPATH"]

def build_lauf(env):
    lauf_dir = env.Dir("lauf")

    cmake_configure = env.AddPreAction(
        lauf_dir,
        env.Command(
            env.File('lauf/build/CMakeCache.txt'),
            env.File('lauf/CMakeLists.txt'),
            env.Action('@cmake -DCMAKE_BUILD_TYPE="Release" -DLAUF_BUILD_BENCHMARKS=false -DLAUF_BUILD_TESTS=false -DLAUF_BUILD_TOOLS=false -Bbuild -H.', chdir=lauf_dir)
        )
    )
    cmake_build = env.AddPreAction(
        cmake_configure,
        env.Command(
            env.File("lauf/build/src/liblauf_core" + env["LIBSUFFIX"]),
            env.File('lauf/build/CMakeCache.txt'),
            env.Action('@cmake --build build', chdir=lauf_dir)
        )
    )
    env.Default(cmake_build)

    include_path = "lauf/include"
    env.Append(LIBPATH=env.Dir("lauf/build/src"))
    env.Prepend(LIBS=["liblauf_core", "liblauf_text", "liblauf_qbe"])
    env.Append(CPPPATH=[env.Dir(include_path)])
    env.Append(CPPDEFINES=["LAUF_CONFIG_DISPATCH_JUMP_TABLE=1"])
    env.exposed_includes += [env.Dir(include_path)]

build_openvic_dataloader(env)
build_lexy_vdf(env)
build_ordered_map(env)
build_colony(env)
build_lauf(env)