#!/usr/bin/env python
import os

Import("env")

def run_cmake(target, source, env, cmake_arguments = None):
    import subprocess
    import os

    cmake_arguments = cmake_arguments or env.overrides.get('cmake_arguments', None)
    if cmake_arguments == None:
        cmake_arguments = []

    cmake_path = env.WhereIs("cmake")

    if cmake_path == None:
        print("CMake could not be found. (may need to install CMake) Exiting build process.")
        return 1

    cmake_arguments.insert(0, cmake_path)

    completed_process = subprocess.run(cmake_arguments, text=True)

    if completed_process.returncode != 0:
        print("CMake failed. Exiting build process.")
        return 1

    return 0

env.Append(BUILDERS={'RunCMake': Builder(action=run_cmake)})

def build_openvic_dataloader(env):
    ovdl_env = SConscript("openvic-dataloader/SConstruct")
    env.Append(LIBPATH=ovdl_env.openvic_dataloader["LIBPATH"])
    env.Prepend(LIBS=ovdl_env.openvic_dataloader["LIBS"])
    env.Append(CPPPATH=ovdl_env.openvic_dataloader["INCPATH"])
    env.openvic_dataloader = ovdl_env.openvic_dataloader
    env.exposed_includes += env.openvic_dataloader["INCPATH"]

def build_lexy_vdf(env):
    lvdf_env = SConscript("lexy-vdf/SConstruct")
    env.Append(LIBPATH=lvdf_env.lexy_vdf["LIBPATH"])
    env.Prepend(LIBS=lvdf_env.lexy_vdf["LIBS"])
    env.Append(CPPPATH=lvdf_env.lexy_vdf["INCPATH"])
    env.lexy_vdf = lvdf_env.lexy_vdf

def build_ordered_map(env):
    include_path = "ordered-map/include"
    env.ordered_map = {}
    env.ordered_map["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.ordered_map["INCPATH"])
    env.exposed_includes += env.ordered_map["INCPATH"]

def build_colony(env):
    include_path = "plf_colony"
    env.colony = {}
    env.colony["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.colony["INCPATH"])
    env.exposed_includes += env.colony["INCPATH"]

def build_lauf(env):
    env.Append(CPPDEFINES=["LAUF_CONFIG_DISPATCH_JUMP_TABLE=1"])
    lauf_env = env.Clone()
    lauf_env.Append(LIBPATH=[env.Dir("openvic-dataloader/deps/lexy/src")])
    lauf_env.Append(LIBS=["lexy_file"])
    lauf_env.Append(CPPPATH=[env.Dir("openvic-dataloader/deps/lexy/include")])

    # Require C++20
    if lauf_env.get("is_msvc", False):
        lauf_env.Append(CXXFLAGS=["/std:c++20"])

        lauf_env.Append(CXXFLAGS=["/WX", "/W3", "/D", "_CRT_SECURE_NO_WARNINGS"])
        if lauf_env.get("use_clang_cl"):
            lauf_env.Append(CXXFLAGS=["-Wno-return-type-c-linkage", "-fomit-frame-pointer"])
    else:
        lauf_env.Append(CXXFLAGS=["-std=c++20"])

        lauf_env.Append(CXXFLAGS=["-pedantic-errors", "-Werror", "-Wall", "-Wextra", "-Wconversion", "-Wsign-conversion", "-fomit-frame-pointer"])
        if lauf_env["CXX"] == "clang++":
            lauf_env.Append(CXXFLAGS=["-Wno-return-type-c-linkage"])
        else:
            lauf_env.Append(CXXFLAGS=[
                "-Wno-parentheses", "-Wno-unused-local-typedefs", "-Wno-array-bounds"
            ])

    include_path = "lauf/include"
    source_path = "lauf/src"
    lauf_env.Append(CPPPATH=[[lauf_env.Dir(p) for p in [source_path, include_path]]])
    sources = env.GlobRecursive("*.cpp", [source_path])
    env.lexy_sources = sources

    library_name = "liblauf" + env["LIBSUFFIX"]
    library = lauf_env.StaticLibrary(target=os.path.join(source_path, library_name), source=sources)
    Default(library)

    include_dir = lauf_env.Dir(include_path)
    source_dir = lauf_env.Dir(source_path)
    env.Append(CPPPATH=[include_dir])
    if env.get("is_msvc", False):
        env.Append(CXXFLAGS=["/external:I", include_dir, "/external:W0"])
    else:
        env.Append(CXXFLAGS=["-isystem", include_dir])
    env.Append(LIBPATH=[source_dir])
    env.Prepend(LIBS=[library_name])

build_openvic_dataloader(env)
build_lexy_vdf(env)
build_ordered_map(env)
build_colony(env)
build_lauf(env)